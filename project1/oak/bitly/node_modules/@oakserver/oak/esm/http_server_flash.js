var _FlashServer_app, _FlashServer_closed, _FlashServer_controller, _FlashServer_abortController, _FlashServer_options, _FlashServer_servePromise, _FlashServer_stream;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
// Copyright 2018-2022 the oak authors. All rights reserved. MIT license.
import * as dntShim from "./_dnt.shims.js";
import { deferred, Status, STATUS_TEXT } from "./deps.js";
import { HttpRequest } from "./http_request.js";
import { assert } from "./util.js";
const serve = "serve" in dntShim.Deno
    // deno-lint-ignore no-explicit-any
    ? dntShim.Deno.serve.bind(dntShim.Deno)
    : undefined;
const serveTls = "serveTls" in dntShim.Deno
    // deno-lint-ignore no-explicit-any
    ? dntShim.Deno.serveTls.bind(dntShim.Deno)
    : undefined;
function isServeTlsInit(value) {
    return "cert" in value && "key" in value;
}
/** A function that determines if the current environment supports Deno flash.*/
export function hasFlash() {
    // @ts-expect-error they might not actually be defined!
    return !!(serve && serveTls);
}
/** A server abstraction which manages requests from Deno's flash server.
 *
 * You can pass the class as the `server` property when constructing a new
 * application to force the application to use Deno's flash server.
 */
export class FlashServer {
    // deno-lint-ignore no-explicit-any
    constructor(app, options) {
        // deno-lint-ignore no-explicit-any
        _FlashServer_app.set(this, void 0);
        _FlashServer_closed.set(this, false);
        _FlashServer_controller.set(this, void 0);
        _FlashServer_abortController.set(this, new AbortController());
        _FlashServer_options.set(this, void 0);
        _FlashServer_servePromise.set(this, void 0);
        _FlashServer_stream.set(this, void 0);
        if (!serve || !serveTls) {
            throw new Error("The flash bindings for serving HTTP are not available.");
        }
        __classPrivateFieldSet(this, _FlashServer_app, app, "f");
        __classPrivateFieldSet(this, _FlashServer_options, options, "f");
    }
    async close() {
        if (__classPrivateFieldGet(this, _FlashServer_closed, "f")) {
            return;
        }
        __classPrivateFieldSet(this, _FlashServer_closed, true, "f");
        try {
            __classPrivateFieldGet(this, _FlashServer_controller, "f")?.close();
            __classPrivateFieldSet(this, _FlashServer_controller, undefined, "f");
            __classPrivateFieldSet(this, _FlashServer_stream, undefined, "f");
            __classPrivateFieldGet(this, _FlashServer_abortController, "f").abort();
            if (__classPrivateFieldGet(this, _FlashServer_servePromise, "f")) {
                await __classPrivateFieldGet(this, _FlashServer_servePromise, "f");
                __classPrivateFieldSet(this, _FlashServer_servePromise, undefined, "f");
            }
        }
        catch {
            // just swallow here
        }
    }
    listen() {
        const p = deferred();
        const start = (controller) => {
            __classPrivateFieldSet(this, _FlashServer_controller, controller, "f");
            const options = {
                ...__classPrivateFieldGet(this, _FlashServer_options, "f"),
                signal: __classPrivateFieldGet(this, _FlashServer_abortController, "f").signal,
                onListen: (addr) => p.resolve({ addr }),
                onError: (error) => {
                    __classPrivateFieldGet(this, _FlashServer_app, "f").dispatchEvent(new dntShim.ErrorEvent("error", { error }));
                    return new dntShim.Response("Internal server error", {
                        status: Status.InternalServerError,
                        statusText: STATUS_TEXT[Status.InternalServerError],
                    });
                },
            };
            const handler = (request) => {
                const resolve = deferred();
                const flashRequest = new HttpRequest(request, resolve);
                controller.enqueue(flashRequest);
                return resolve;
            };
            if (isServeTlsInit(options)) {
                __classPrivateFieldSet(this, _FlashServer_servePromise, serveTls(handler, options), "f");
            }
            else {
                __classPrivateFieldSet(this, _FlashServer_servePromise, serve(handler, options), "f");
            }
        };
        __classPrivateFieldSet(this, _FlashServer_stream, new dntShim.ReadableStream({ start }), "f");
        return p;
    }
    [(_FlashServer_app = new WeakMap(), _FlashServer_closed = new WeakMap(), _FlashServer_controller = new WeakMap(), _FlashServer_abortController = new WeakMap(), _FlashServer_options = new WeakMap(), _FlashServer_servePromise = new WeakMap(), _FlashServer_stream = new WeakMap(), Symbol.asyncIterator)]() {
        assert(__classPrivateFieldGet(this, _FlashServer_stream, "f"), ".listen() was not called before iterating or server is closed.");
        return __classPrivateFieldGet(this, _FlashServer_stream, "f")[Symbol.asyncIterator]();
    }
}
