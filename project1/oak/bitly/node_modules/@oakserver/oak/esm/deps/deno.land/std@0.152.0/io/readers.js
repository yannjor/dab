var _MultiReader_readers, _MultiReader_currentIndex;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { Buffer } from "./buffer.js";
/** Reader utility for strings */
export class StringReader extends Buffer {
    constructor(s) {
        super(new TextEncoder().encode(s).buffer);
    }
}
/** Reader utility for combining multiple readers */
export class MultiReader {
    constructor(readers) {
        _MultiReader_readers.set(this, void 0);
        _MultiReader_currentIndex.set(this, 0);
        __classPrivateFieldSet(this, _MultiReader_readers, [...readers], "f");
    }
    async read(p) {
        var _a;
        const r = __classPrivateFieldGet(this, _MultiReader_readers, "f")[__classPrivateFieldGet(this, _MultiReader_currentIndex, "f")];
        if (!r)
            return null;
        const result = await r.read(p);
        if (result === null) {
            __classPrivateFieldSet(this, _MultiReader_currentIndex, (_a = __classPrivateFieldGet(this, _MultiReader_currentIndex, "f"), _a++, _a), "f");
            return 0;
        }
        return result;
    }
}
_MultiReader_readers = new WeakMap(), _MultiReader_currentIndex = new WeakMap();
/**
 * A `LimitedReader` reads from `reader` but limits the amount of data returned to just `limit` bytes.
 * Each call to `read` updates `limit` to reflect the new amount remaining.
 * `read` returns `null` when `limit` <= `0` or
 * when the underlying `reader` returns `null`.
 */
export class LimitedReader {
    constructor(reader, limit) {
        Object.defineProperty(this, "reader", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: reader
        });
        Object.defineProperty(this, "limit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: limit
        });
    }
    async read(p) {
        if (this.limit <= 0) {
            return null;
        }
        if (p.length > this.limit) {
            p = p.subarray(0, this.limit);
        }
        const n = await this.reader.read(p);
        if (n == null) {
            return null;
        }
        this.limit -= n;
        return n;
    }
}
