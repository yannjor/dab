var _HttpRequest_deferred, _HttpRequest_request, _HttpRequest_resolved, _HttpRequest_upgradeWebSocket;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
// Copyright 2018-2022 the oak authors. All rights reserved. MIT license.
import * as dntShim from "./_dnt.shims.js";
const maybeUpgradeWebSocket = "upgradeWebSocket" in dntShim.Deno
    ? // deno-lint-ignore no-explicit-any
        dntShim.Deno.upgradeWebSocket.bind(dntShim.Deno)
    : undefined;
/** An abstraction which wraps a {@linkcode Request} from Deno's flash server.
 * The constructor takes a {@linkcode Deferred} which it will resolve when the
 * response is ready.
 *
 * This request can be used in situations where there isn't a specific method
 * to respond with, but where a `Promise<Response>` is accepted as a value. It
 * is specifically designed to work with Deno's flash server.
 */
export class HttpRequest {
    constructor(request, deferred, upgradeWebSocket) {
        _HttpRequest_deferred.set(this, void 0);
        _HttpRequest_request.set(this, void 0);
        _HttpRequest_resolved.set(this, false);
        _HttpRequest_upgradeWebSocket.set(this, void 0);
        __classPrivateFieldSet(this, _HttpRequest_deferred, deferred, "f");
        __classPrivateFieldSet(this, _HttpRequest_request, request, "f");
        __classPrivateFieldSet(this, _HttpRequest_upgradeWebSocket, upgradeWebSocket ?? maybeUpgradeWebSocket, "f");
    }
    get remoteAddr() {
        return undefined;
    }
    get headers() {
        return __classPrivateFieldGet(this, _HttpRequest_request, "f").headers;
    }
    get method() {
        return __classPrivateFieldGet(this, _HttpRequest_request, "f").method;
    }
    get url() {
        try {
            const url = new URL(__classPrivateFieldGet(this, _HttpRequest_request, "f").url);
            return __classPrivateFieldGet(this, _HttpRequest_request, "f").url.replace(url.origin, "");
        }
        catch {
            // we don't care about errors, we just want to fall back
        }
        return __classPrivateFieldGet(this, _HttpRequest_request, "f").url;
    }
    // deno-lint-ignore no-explicit-any
    error(reason) {
        if (__classPrivateFieldGet(this, _HttpRequest_resolved, "f")) {
            throw new Error("Request already responded to.");
        }
        __classPrivateFieldGet(this, _HttpRequest_deferred, "f").reject(reason);
        __classPrivateFieldSet(this, _HttpRequest_resolved, true, "f");
    }
    getBody() {
        return {
            body: __classPrivateFieldGet(this, _HttpRequest_request, "f").body,
            readBody: async () => {
                const ab = await __classPrivateFieldGet(this, _HttpRequest_request, "f").arrayBuffer();
                return new Uint8Array(ab);
            },
        };
    }
    respond(response) {
        if (__classPrivateFieldGet(this, _HttpRequest_resolved, "f")) {
            throw new Error("Request already responded to.");
        }
        __classPrivateFieldGet(this, _HttpRequest_deferred, "f").resolve(response);
        __classPrivateFieldSet(this, _HttpRequest_resolved, true, "f");
        return Promise.resolve();
    }
    upgrade(options) {
        if (__classPrivateFieldGet(this, _HttpRequest_resolved, "f")) {
            throw new Error("Request already responded to.");
        }
        if (!__classPrivateFieldGet(this, _HttpRequest_upgradeWebSocket, "f")) {
            throw new TypeError("Upgrading web sockets not supported.");
        }
        const { response, socket } = __classPrivateFieldGet(this, _HttpRequest_upgradeWebSocket, "f").call(this, __classPrivateFieldGet(this, _HttpRequest_request, "f"), options);
        __classPrivateFieldGet(this, _HttpRequest_deferred, "f").resolve(response);
        return socket;
    }
}
_HttpRequest_deferred = new WeakMap(), _HttpRequest_request = new WeakMap(), _HttpRequest_resolved = new WeakMap(), _HttpRequest_upgradeWebSocket = new WeakMap();
