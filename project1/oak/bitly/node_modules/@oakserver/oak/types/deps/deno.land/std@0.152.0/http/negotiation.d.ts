export declare type Request = {
    headers: {
        get(key: string): string | null;
    };
};
/** Returns an array of media types accepted by the request, in order of
 * preference. If there are no media types supplied in the request, then any
 * media type selector will be returned. */
export declare function accepts(request: Request): string[];
/** For a given set of media types, return the best match accepted in the
 * request. If no media type matches, then the function returns `undefined`. */
export declare function accepts(request: Request, ...types: string[]): string | undefined;
/** Returns an array of content encodings accepted by the request, in order of
 * preference. If there are no encoding supplied in the request, then `["*"]`
 * is returned, implying any encoding is accepted. */
export declare function acceptsEncodings(request: Request): string[];
/** For a given set of content encodings, return the best match accepted in the
 * request. If no content encodings match, then the function returns
 * `undefined`.
 *
 * **NOTE:** You should always supply `identity` as one of the encodings
 * to ensure that there is a match when the `Accept-Encoding` header is part
 * of the request. */
export declare function acceptsEncodings(request: Request, ...encodings: string[]): string | undefined;
/** Returns an array of languages accepted by the request, in order of
 * preference. If there are no languages supplied in the request, then `["*"]`
 * is returned, imply any language is accepted. */
export declare function acceptsLanguages(request: Request): string[];
/** For a given set of languages, return the best match accepted in the request.
 * If no languages match, then the function returns `undefined`. */
export declare function acceptsLanguages(request: Request, ...langs: string[]): string | undefined;
