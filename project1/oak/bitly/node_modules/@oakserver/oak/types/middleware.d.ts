import type { State } from "./application.js";
import type { Context } from "./context.js";
/** Middleware are functions which are chained together to deal with requests. */
export interface Middleware<S extends State = Record<string, any>, T extends Context = Context<S>> {
    (context: T, next: () => Promise<unknown>): Promise<unknown> | unknown;
}
/** Compose multiple middleware functions into a single middleware function. */
export declare function compose<S extends State = Record<string, any>, T extends Context = Context<S>>(middleware: Middleware<S, T>[]): (context: T, next?: () => Promise<unknown>) => Promise<unknown>;
