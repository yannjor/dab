import * as dntShim from "./_dnt.shims.js";
import { type Application } from "./application.js";
import { HttpRequest } from "./http_request.js";
import type { Listener, Server } from "./types";
interface ServeInit {
    port?: number;
    hostname?: string;
    signal?: AbortSignal;
    onError?: (error: unknown) => dntShim.Response | Promise<dntShim.Response>;
    onListen?: (params: {
        hostname: string;
        port: number;
    }) => void;
}
interface ServeTlsInit extends ServeInit {
    cert: string;
    key: string;
}
declare type FlashServerOptions = Omit<Partial<ServeTlsInit>, "onListen" | "signal">;
/** A function that determines if the current environment supports Deno flash.*/
export declare function hasFlash(): boolean;
/** A server abstraction which manages requests from Deno's flash server.
 *
 * You can pass the class as the `server` property when constructing a new
 * application to force the application to use Deno's flash server.
 */
export declare class FlashServer implements Server<HttpRequest> {
    #private;
    constructor(app: Application<any>, options: FlashServerOptions);
    close(): Promise<void>;
    listen(): Promise<Listener>;
    [Symbol.asyncIterator](): AsyncIterableIterator<HttpRequest>;
}
export {};
